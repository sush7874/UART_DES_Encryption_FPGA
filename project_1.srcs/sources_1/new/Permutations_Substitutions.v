module Encryption(output reg [63:0] cipher, input [63:0] message, input [63:0] key, input ack, input clk);
  // output reg [63:0] cipher;
  // input [63:0] message;
  // input [63:0] key;
  // // this function is used to shuffle the 64 bits at step 3.
  function [63:0] final_perm(input [63:0] message);
    integer FP[63:0];
    reg [63:0] temp;
    integer i;
    begin
    // FP[0:63] = {58, 50, 42, 34, 26, 18, 10, 2,
	  // 60, 52, 44, 36, 28, 20, 12, 4,
	  // 62, 54, 46, 38, 30, 22, 14, 6,
	  // 64, 56, 48, 40, 32, 24, 16, 8,
	  // 57, 49, 41, 33, 25, 17,  9, 1,
	  // 59, 51, 43, 35, 27, 19, 11, 3,
	  // 61, 53, 45, 37, 29, 21, 13, 5,
	  // 63, 55, 47, 39, 31, 23, 15, 7};
    FP[0] = 40;FP[1] = 8;FP[2] = 48;FP[3] = 16;FP[4] = 56;FP[5] = 24;
    FP[6] = 64;FP[7] = 32;FP[8] = 39;FP[9] = 7;FP[10] = 47;FP[11] = 15;
    FP[12] = 55;FP[13] = 23;FP[14] = 63;FP[15] = 31;FP[16] = 38;FP[17] = 6;
    FP[18] = 46;FP[19] = 14;FP[20] = 54;FP[21] = 22;FP[22] = 62;FP[23] = 30;
    FP[24] = 37;FP[25] = 5;FP[26] = 45;FP[27] = 13;FP[28] = 53;FP[29] = 21;
    FP[30] = 61;FP[31] = 29;FP[32] = 36;FP[33] = 4;FP[34] = 44;FP[35] = 12;
    FP[36] = 52;FP[37] = 20;FP[38] = 60;FP[39] = 28;FP[40] = 35;FP[41] = 3;
    FP[42] = 43;FP[43] = 11;FP[44] = 51;FP[45] = 19;FP[46] = 59;FP[47] = 27;
    FP[48] = 34;FP[49] = 2;FP[50] = 42;FP[51] = 10;FP[52] = 50;FP[53] = 18;
    FP[54] = 58;FP[55] = 26;FP[56] = 33;FP[57] = 1;FP[58] = 41;FP[59] = 9;
    FP[60] = 49;FP[61] = 17;FP[62] = 57;FP[63] = 25;
    for(i=0; i<64; i=i+1) begin
      //$display("%b",message);
      //$display(FP[i]);
      //$display(message[64-FP[i]]);
      temp[63-i] = message[64-FP[i]];
      end
    final_perm = temp;
  end
endfunction
// this function is used to shuffle the 64 bits initially at Step 1.
function [63:0] i_Perm(input [63:0] message);
  integer IP[63:0];
  reg [63:0] temp;
  integer i;
  begin
    IP[0] = 58;IP[1] = 50;IP[2] = 42;IP[3] = 34;IP[4] = 26;IP[5] = 18;
    IP[6] = 10;IP[7] = 2;IP[8] = 60;IP[9] = 52;IP[10] = 44;IP[11] = 36;
    IP[12] = 28;IP[13] = 20;IP[14] = 12;IP[15] = 4;IP[16] = 62;IP[17] = 54;
    IP[18] = 46;IP[19] = 38;IP[20] = 30;IP[21] = 22;IP[22] = 14;IP[23] = 6;
    IP[24] = 64;IP[25] = 56;IP[26] = 48;IP[27] = 40;IP[28] = 32;IP[29] = 24;
    IP[30] = 16;IP[31] = 8;IP[32] = 57;IP[33] = 49;IP[34] = 41;IP[35] = 33;
    IP[36] = 25;IP[37] = 17;IP[38] = 9;IP[39] = 1;IP[40] = 59;IP[41] = 51;
    IP[42] = 43;IP[43] = 35;IP[44] = 27;IP[45] = 19;IP[46] = 11;IP[47] = 3;
    IP[48] = 61;IP[49] = 53;IP[50] = 45;IP[51] = 37;IP[52] = 29;IP[53] = 21;
    IP[54] = 13;IP[55] = 5;IP[56] = 63;IP[57] = 55;IP[58] = 47;IP[59] = 39;
    IP[60] = 31;IP[61] = 23;IP[62] = 15;IP[63] = 7;

    for(i=0; i<=63; i=i+1)begin

      temp[63-i] = message[64-IP[i]];

      //$display(message[63-IP[i]-1]);
      end
    i_Perm = temp;
  end
endfunction
// AFter the key transform step, we get a key of width 48 bits. so we use the current transform to
// expand the RPT from 32 bits to 48 bits.
function [47:0] Expansion_perm(input [31:0] R);
  integer E[47:0];
  reg [47:0] temp_E;
  integer i;
  begin

    E[0] = 32;E[1] = 1;E[2] = 2;E[3] = 3;E[4] = 4;E[5] = 5;E[6] = 4;E[7] = 5;
    E[8] = 6;E[9] = 7;E[10] = 8;E[11] = 9;E[12] = 8;E[13] = 9;E[14] = 10;E[15] = 11;
    E[16] = 12;E[17] = 13;E[18] = 12;E[19] = 13;E[20] = 14;E[21] = 15;E[22] = 16;E[23] = 17;
    E[24] = 16;E[25] = 17;E[26] = 18;E[27] = 19;E[28] = 20;E[29] = 21;E[30] = 20;E[31] = 21;
    E[32] = 22;E[33] = 23;E[34] = 24;E[35] = 25;E[36] = 24;E[37] = 25;E[38] = 26;E[39] = 27;
    E[40] = 28;E[41] = 29;E[42] = 28;E[43] = 29;E[44] = 30;E[45] = 31;E[46] = 32;E[47] = 1;

    for(i=0; i<48; i=i+1)
      temp_E[47-i] = R[32-E[i]];

    Expansion_perm = temp_E;
  end
endfunction

// This function is used after sbox substitution. the output from Sbox substitution is 32 bits.
// this permutation is done to shuffle again after SBOX substitution.
function [31:0] PBox_perm(input [31:0] s_res);
  integer i;
  integer P[31:0];
  reg [31:0] temp_P;
  begin
    P[0] = 16;P[1] = 7;P[2] = 20;P[3] = 21;P[4] = 29;P[5] = 12;P[6] = 28;P[7] = 17;
    P[8] = 1;P[9] = 15;P[10] = 23;P[11] = 26;P[12] = 5;P[13] = 18;P[14] = 31;P[15] = 10;
    P[16] = 2;P[17] = 8;P[18] = 24;P[19] = 14;P[20] = 32;P[21] = 27;P[22] = 3;P[23] = 9;
    P[24] = 19;P[25] = 13;P[26] = 30;P[27] = 6;P[28] = 22;P[29] = 11;P[30] = 4;P[31] = 25;

    for(i=0; i<32; i=i+1)
      temp_P[31-i] = s_res[32-P[i]];
      //$display(temp_P);
    PBox_perm = temp_P;
  end
endfunction

// This function takes an input of 6 bits and returns an output of 4 bits.
// In the SBOX substitution stage, it takes in input of 48 bits and splits it into 8 parts of
// 6 bits each and gets an output of 4 bits, totaling a 32 bit output from sbox stage.
function [4:1] SBOX(input [6:1] B, input reg [4:0] s_table_id);
  reg [2:1] i;
  reg [4:1] j;
  reg [3:0] S1[3:0][15:0];
  reg [3:0] S2[3:0][15:0];
  reg [3:0] S3[3:0][15:0];
  reg [3:0] S4[3:0][15:0];
  reg [3:0] S5[3:0][15:0];
  reg [3:0] S6[3:0][15:0];
  reg [3:0] S7[3:0][15:0];
  reg [3:0] S8[3:0][15:0];
  begin
    S1[0][0] = 14;S1[0][1] = 4;S1[0][2] = 13;S1[0][3] = 1;S1[0][4] = 2;S1[0][5] = 15;S1[0][6] = 11;S1[0][7] = 8;
    S1[0][8] = 3;S1[0][9] = 10;S1[0][10] = 6;S1[0][11] = 12;S1[0][12] = 5;S1[0][13] = 9;S1[0][14] = 0;S1[0][15] = 7;
    S1[1][0] = 0;S1[1][1] = 15;S1[1][2] = 7;S1[1][3] = 4;S1[1][4] = 14;S1[1][5] = 2;S1[1][6] = 13;S1[1][7] = 1;
    S1[1][8] = 10;S1[1][9] = 6;S1[1][10] = 12;S1[1][11] = 11;S1[1][12] = 9;S1[1][13] = 5;S1[1][14] = 3;S1[1][15] = 8;
    S1[2][0] = 4;S1[2][1] = 1;S1[2][2] = 14;S1[2][3] = 8;S1[2][4] = 13;S1[2][5] = 6;S1[2][6] = 2;S1[2][7] = 11;
    S1[2][8] = 15;S1[2][9] = 12;S1[2][10] = 9;S1[2][11] = 7;S1[2][12] = 3;S1[2][13] = 10;S1[2][14] = 5;S1[2][15] = 0;
    S1[3][0] = 15;S1[3][1] = 12;S1[3][2] = 8;S1[3][3] = 2;S1[3][4] = 4;S1[3][5] = 9;S1[3][6] = 1;S1[3][7] = 7;
    S1[3][8] = 5;S1[3][9] = 11;S1[3][10] = 3;S1[3][11] = 14;S1[3][12] = 10;S1[3][13] = 0;S1[3][14] = 6;S1[3][15] = 13;

    S2[0][0] = 15;S2[0][1] = 1;S2[0][2] = 8;S2[0][3] = 14;S2[0][4] = 6;S2[0][5] = 11;S2[0][6] = 3;S2[0][7] = 4;
    S2[0][8] = 9;S2[0][9] = 7;S2[0][10] = 2;S2[0][11] = 13;S2[0][12] = 12;S2[0][13] = 0;S2[0][14] = 5;S2[0][15] = 10;
    S2[1][0] = 3;S2[1][1] = 13;S2[1][2] = 4;S2[1][3] = 7;S2[1][4] = 15;S2[1][5] = 2;S2[1][6] = 8;S2[1][7] = 14;
    S2[1][8] = 12;S2[1][9] = 0;S2[1][10] = 1;S2[1][11] = 10;S2[1][12] = 6;S2[1][13] = 9;S2[1][14] = 11;S2[1][15] = 5;
    S2[2][0] = 0;S2[2][1] = 14;S2[2][2] = 7;S2[2][3] = 11;S2[2][4] = 10;S2[2][5] = 4;S2[2][6] = 13;S2[2][7] = 1;
    S2[2][8] = 5;S2[2][9] = 8;S2[2][10] = 12;S2[2][11] = 6;S2[2][12] = 9;S2[2][13] = 3;S2[2][14] = 2;S2[2][15] = 15;
    S2[3][0] = 13;S2[3][1] = 8;S2[3][2] = 10;S2[3][3] = 1;S2[3][4] = 3;S2[3][5] = 15;S2[3][6] = 4;S2[3][7] = 2;
    S2[3][8] = 11;S2[3][9] = 6;S2[3][10] = 7;S2[3][11] = 12;S2[3][12] = 0;S2[3][13] = 5;S2[3][14] = 14;S2[3][15] = 9;

    S3[0][0] = 10;S3[0][1] = 0;S3[0][2] = 9;S3[0][3] = 14;S3[0][4] = 6;S3[0][5] = 3;S3[0][6] = 15;S3[0][7] = 5;
    S3[0][8] = 1;S3[0][9] = 13;S3[0][10] = 12;S3[0][11] = 7;S3[0][12] = 11;S3[0][13] = 4;S3[0][14] = 2;S3[0][15] = 8;
    S3[1][0] = 13;S3[1][1] = 7;S3[1][2] = 0;S3[1][3] = 9;S3[1][4] = 3;S3[1][5] = 4;S3[1][6] = 6;S3[1][7] = 10;
    S3[1][8] = 2;S3[1][9] = 8;S3[1][10] = 5;S3[1][11] = 14;S3[1][12] = 12;S3[1][13] = 11;S3[1][14] = 15;S3[1][15] = 1;
    S3[2][0] = 13;S3[2][1] = 6;S3[2][2] = 4;S3[2][3] = 9;S3[2][4] = 8;S3[2][5] = 15;S3[2][6] = 3;S3[2][7] = 0;
    S3[2][8] = 11;S3[2][9] = 1;S3[2][10] = 2;S3[2][11] = 12;S3[2][12] = 5;S3[2][13] = 10;S3[2][14] = 14;S3[2][15] = 7;
    S3[3][0] = 1;S3[3][1] = 10;S3[3][2] = 13;S3[3][3] = 0;S3[3][4] = 6;S3[3][5] = 9;S3[3][6] = 8;S3[3][7] = 7;
    S3[3][8] = 4;S3[3][9] = 15;S3[3][10] = 14;S3[3][11] = 3;S3[3][12] = 11;S3[3][13] = 5;S3[3][14] = 2;S3[3][15] = 12;

    S4[0][0] = 7;S4[0][1] = 13;S4[0][2] = 14;S4[0][3] = 3;S4[0][4] = 0;S4[0][5] = 6;S4[0][6] = 9;S4[0][7] = 10;
    S4[0][8] = 1;S4[0][9] = 2;S4[0][10] = 8;S4[0][11] = 5;S4[0][12] = 11;S4[0][13] = 12;S4[0][14] = 4;S4[0][15] = 15;
    S4[1][0] = 13;S4[1][1] = 8;S4[1][2] = 11;S4[1][3] = 5;S4[1][4] = 6;S4[1][5] = 15;S4[1][6] = 0;S4[1][7] = 3;
    S4[1][8] = 4;S4[1][9] = 7;S4[1][10] = 2;S4[1][11] = 12;S4[1][12] = 1;S4[1][13] = 10;S4[1][14] = 14;S4[1][15] = 9;
    S4[2][0] = 10;S4[2][1] = 6;S4[2][2] = 9;S4[2][3] = 0;S4[2][4] = 12;S4[2][5] = 11;S4[2][6] = 7;S4[2][7] = 13;
    S4[2][8] = 15;S4[2][9] = 1;S4[2][10] = 3;S4[2][11] = 14;S4[2][12] = 5;S4[2][13] = 2;S4[2][14] = 8;S4[2][15] = 4;
    S4[3][0] = 3;S4[3][1] = 15;S4[3][2] = 0;S4[3][3] = 6;S4[3][4] = 10;S4[3][5] = 1;S4[3][6] = 13;S4[3][7] = 8;
    S4[3][8] = 9;S4[3][9] = 4;S4[3][10] = 5;S4[3][11] = 11;S4[3][12] = 12;S4[3][13] = 7;S4[3][14] = 2;S4[3][15] = 14;

    S5[0][0] = 2;S5[0][1] = 12;S5[0][2] = 4;S5[0][3] = 1;S5[0][4] = 7;S5[0][5] = 10;S5[0][6] = 11;S5[0][7] = 6;
    S5[0][8] = 8;S5[0][9] = 5;S5[0][10] = 3;S5[0][11] = 15;S5[0][12] = 13;S5[0][13] = 0;S5[0][14] = 14;S5[0][15] = 9;
    S5[1][0] = 14;S5[1][1] = 11;S5[1][2] = 2;S5[1][3] = 12;S5[1][4] = 4;S5[1][5] = 7;S5[1][6] = 13;S5[1][7] = 1;
    S5[1][8] = 5;S5[1][9] = 0;S5[1][10] = 15;S5[1][11] = 10;S5[1][12] = 3;S5[1][13] = 9;S5[1][14] = 8;S5[1][15] = 6;
    S5[2][0] = 4;S5[2][1] = 2;S5[2][2] = 1;S5[2][3] = 11;S5[2][4] = 10;S5[2][5] = 13;S5[2][6] = 7;S5[2][7] = 8;
    S5[2][8] = 15;S5[2][9] = 9;S5[2][10] = 12;S5[2][11] = 5;S5[2][12] = 6;S5[2][13] = 3;S5[2][14] = 0;S5[2][15] = 14;
    S5[3][0] = 11;S5[3][1] = 8;S5[3][2] = 12;S5[3][3] = 7;S5[3][4] = 1;S5[3][5] = 14;S5[3][6] = 2;S5[3][7] = 13;
    S5[3][8] = 6;S5[3][9] = 15;S5[3][10] = 0;S5[3][11] = 9;S5[3][12] = 10;S5[3][13] = 4;S5[3][14] = 5;S5[3][15] = 3;

    S6[0][0] = 12;S6[0][1] = 1;S6[0][2] = 10;S6[0][3] = 15;S6[0][4] = 9;S6[0][5] = 2;S6[0][6] = 6;S6[0][7] = 8;
    S6[0][8] = 0;S6[0][9] = 13;S6[0][10] = 3;S6[0][11] = 4;S6[0][12] = 14;S6[0][13] = 7;S6[0][14] = 5;S6[0][15] = 11;
    S6[1][0] = 10;S6[1][1] = 15;S6[1][2] = 4;S6[1][3] = 2;S6[1][4] = 7;S6[1][5] = 12;S6[1][6] = 9;S6[1][7] = 5;
    S6[1][8] = 6;S6[1][9] = 1;S6[1][10] = 13;S6[1][11] = 14;S6[1][12] = 0;S6[1][13] = 11;S6[1][14] = 3;S6[1][15] = 8;
    S6[2][0] = 9;S6[2][1] = 14;S6[2][2] = 15;S6[2][3] = 5;S6[2][4] = 2;S6[2][5] = 8;S6[2][6] = 12;S6[2][7] = 3;
    S6[2][8] = 7;S6[2][9] = 0;S6[2][10] = 4;S6[2][11] = 10;S6[2][12] = 1;S6[2][13] = 13;S6[2][14] = 11;S6[2][15] = 6;
    S6[3][0] = 4;S6[3][1] = 3;S6[3][2] = 2;S6[3][3] = 12;S6[3][4] = 9;S6[3][5] = 5;S6[3][6] = 15;S6[3][7] = 10;
    S6[3][8] = 11;S6[3][9] = 14;S6[3][10] = 1;S6[3][11] = 7;S6[3][12] = 6;S6[3][13] = 0;S6[3][14] = 8;S6[3][15] = 13;

    S7[0][0] = 4;S7[0][1] = 11;S7[0][2] = 2;S7[0][3] = 14;S7[0][4] = 15;S7[0][5] = 0;S7[0][6] = 8;S7[0][7] = 13;
    S7[0][8] = 3;S7[0][9] = 12;S7[0][10] = 9;S7[0][11] = 7;S7[0][12] = 5;S7[0][13] = 10;S7[0][14] = 6;S7[0][15] = 1;
    S7[1][0] = 13;S7[1][1] = 0;S7[1][2] = 11;S7[1][3] = 7;S7[1][4] = 4;S7[1][5] = 9;S7[1][6] = 1;S7[1][7] = 10;
    S7[1][8] = 14;S7[1][9] = 3;S7[1][10] = 5;S7[1][11] = 12;S7[1][12] = 2;S7[1][13] = 15;S7[1][14] = 8;S7[1][15] = 6;
    S7[2][0] = 1;S7[2][1] = 4;S7[2][2] = 11;S7[2][3] = 13;S7[2][4] = 12;S7[2][5] = 3;S7[2][6] = 7;S7[2][7] = 14;
    S7[2][8] = 10;S7[2][9] = 15;S7[2][10] = 6;S7[2][11] = 8;S7[2][12] = 0;S7[2][13] = 5;S7[2][14] = 9;S7[2][15] = 2;
    S7[3][0] = 6;S7[3][1] = 11;S7[3][2] = 13;S7[3][3] = 8;S7[3][4] = 1;S7[3][5] = 4;S7[3][6] = 10;S7[3][7] = 7;
    S7[3][8] = 9;S7[3][9] = 5;S7[3][10] = 0;S7[3][11] = 15;S7[3][12] = 14;S7[3][13] = 2;S7[3][14] = 3;S7[3][15] = 12;

    S8[0][0] = 13;S8[0][1] = 2;S8[0][2] = 8;S8[0][3] = 4;S8[0][4] = 6;S8[0][5] = 15;S8[0][6] = 11;S8[0][7] = 1;
    S8[0][8] = 10;S8[0][9] = 9;S8[0][10] = 3;S8[0][11] = 14;S8[0][12] = 5;S8[0][13] = 0;S8[0][14] = 12;S8[0][15] = 7;
    S8[1][0] = 1;S8[1][1] = 15;S8[1][2] = 13;S8[1][3] = 8;S8[1][4] = 10;S8[1][5] = 3;S8[1][6] = 7;S8[1][7] = 4;
    S8[1][8] = 12;S8[1][9] = 5;S8[1][10] = 6;S8[1][11] = 11;S8[1][12] = 0;S8[1][13] = 14;S8[1][14] = 9;S8[1][15] = 2;
    S8[2][0] = 7;S8[2][1] = 11;S8[2][2] = 4;S8[2][3] = 1;S8[2][4] = 9;S8[2][5] = 12;S8[2][6] = 14;S8[2][7] = 2;
    S8[2][8] = 0;S8[2][9] = 6;S8[2][10] = 10;S8[2][11] = 13;S8[2][12] = 15;S8[2][13] = 3;S8[2][14] = 5;S8[2][15] = 8;
    S8[3][0] = 2;S8[3][1] = 1;S8[3][2] = 14;S8[3][3] = 7;S8[3][4] = 4;S8[3][5] = 10;S8[3][6] = 8;S8[3][7] = 13;
    S8[3][8] = 15;S8[3][9] = 12;S8[3][10] = 9;S8[3][11] = 0;S8[3][12] = 3;S8[3][13] = 5;S8[3][14] = 6;S8[3][15] = 11;

    i[2:1] = {B[6], B[1]};
    j[4:1] = B[5:2];

    case(s_table_id)
      5'b01: SBOX = S1[i][j];
      5'b10: SBOX = S2[i][j];
      5'b11: SBOX = S3[i][j];
      5'b100: SBOX = S4[i][j];
      5'b101: SBOX = S5[i][j];
      5'b110: SBOX = S6[i][j];
      5'b111: SBOX = S7[i][j];
      5'b1000: SBOX = S8[i][j];
    endcase
    // $display(SBOX);
  end
endfunction
// function expanding the 32 bit to 48 bit
// then going to Sbox substitution stage where the 48 bits are compressed to 32 bits.
// then shuffling the 32 bit data again using the PBox_perm function.
function [31:0] f(input [31:0] R, input [47:0] K);
  reg [47:0] temp;
  reg [31:0] temp_after_s_box;
  reg [5:0] B[8:1];
  begin
    temp = K ^ Expansion_perm(R);
    //$display(K);
    B[1] = temp[47:42];
    B[2] = temp[41:36];
    B[3] = temp[35:30];
    B[4] = temp[29:24];
    B[5] = temp[23:18];
    B[6] = temp[17:12];
    B[7] = temp[11:6];
    B[8] = temp[5:0];
    //$display(B[1]);

    temp_after_s_box = {SBOX(B[1], 5'd1), SBOX(B[2], 5'd2), SBOX(B[3], 5'd3), SBOX(B[4], 5'd4),
                        SBOX(B[5], 5'd5), SBOX(B[6], 5'd6), SBOX(B[7], 5'd7), SBOX(B[8], 5'd8)};

    f = PBox_perm(temp_after_s_box);
    // $display(temp_after_s_box);
  end
endfunction

reg [63:0] new_msg = 0;
reg [31:0] L[16:0], R[16:0]; // splitting the msg to left and right. 16 such left and right
wire [47:0] key1, key2, key3, key4, key5, key6, key7, key8, key9, key10, key11, key12, key13, key14, key15, key16; // keys. as 16 iterations are done.
reg [47:0] K[15:0]; //Keys register.
integer i;
KeyTf ktf(key1, key2, key3, key4, key5, key6, key7, key8, key9, key10, key11, key12, key13, key14, key15, key16, key);
    
always @(posedge clk)begin
if(ack)
begin

  new_msg = i_Perm(message);

  {L[0], R[0]} = new_msg;

  K[0] = key1; K[1] = key2; K[2] = key3; K[3] = key4; K[4] = key5; K[5] = key6; K[6] = key7; K[7] = key8; K[8] = key9; K[9] = key10; K[10] = key11; K[11] = key12; K[12] = key13; K[13] = key14; K[14] = key15; K[15] = key16;

  for(i=1; i<=16; i=i+1)
  begin
    L[i]=R[i-1]; // RPT is given to the next LPT.

    R[i]=L[i-1] ^ f(R[i-1], K[i-1]); // XOR of LPT XOR PBOX output

  end
  cipher[63:0] = final_perm({R[16], L[16]});

end
end
endmodule
